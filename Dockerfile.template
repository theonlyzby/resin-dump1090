# base-image for node on any machine using a template variable,
# see more about dockerfile templates here: http://docs.resin.io/deployment/docker-templates/
# and about resin base images here: http://docs.resin.io/runtime/resin-base-images/
# Note the node:slim image doesn't have node-gyp
# FROM resin/%%RESIN_MACHINE_NAME%%-raspbian:latest
FROM resin/rpi-raspbian:stretch
# FROM resin/raspberrypi3-debian:stretch

# use apt-get if you need to install dependencies,
# Error on: pi-bluetooth raspberrypi-sys-mods raspi-config rpi-update
RUN apt-get update -y && apt-get upgrade -y && apt-get dist-upgrade -y
RUN apt-get install -y git-core git cmake make libusb-1.0-0-dev build-essential nano rtl-sdr gr-osmosdr

#  Clean-up apt-get
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Defines our working directory in container
WORKDIR /

# This will copy all files from our root to the working  directory in the container
COPY . .

# Install RTL-SDR Driver
# RUN cd /opt
# RUN git clone git://git.osmocom.org/rtl-sdr.git
# RUN cd rtl-sdr
# RUN mkdir build
# RUN cd build
# RUN cmake ../ -DINSTALL_UDEV_RULES=ON -DDETACH_KERNEL_DRIVER=ON
# RUN make
# RUN sudo make install
# RUN sudo ldconfig
# RUN cd /opt
# RUN cp ./rtl-sdr/rtl-sdr.rules /etc/udev/rules.d/

# Install dump1090
RUN cd /opt/dump1090
# RUN git clone git://github.com/MalcolmRobb/dump1090.git
# RUN cd dump1090
RUN make
RUN cd ..
RUN printf 'blacklist dvb_usb_rtl28xxu\nblacklist rtl2832\nblacklist rtl2830\n' > nortl.conf
RUN cp ./nortl.conf /etc/modprobe.d/notrl.conf

# Copy Startup Script
COPY /opt/dump1090.sh /etc/init.d/dump1090.sh
RUN chmod +x /etc/init.d/dump1090.sh
RUN update-rc.d dump1090.sh defaults

# Starts up the Docker on the device
CMD [ "bash" , "/opt/start.sh"]
